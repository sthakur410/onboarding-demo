package svc

import (
	"context"
	"fmt"

	"onboarding-demo/pkg/pb"

	// "fmt"
	// "time"
	"github.com/golang/protobuf/ptypes/empty"
	"github.com/jinzhu/gorm"
)

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~ A BRIEF DEVELOPMENT GUIDE ~~~~~~~~~~~~~~~~~~~~~~~~~
//
// TODO: Extend the OnboardingDemo service by defining new RPCs and
// and message types in the pb/service.proto file. These RPCs and messages
// compose the API for your service. After modifying the proto schema in
// pb/service.proto, call "make protobuf" to regenerate the protobuf files.
//
// TODO: Create an implementation of the OnboardingDemo server
// interface. This interface is generated by the protobuf compiler and exists
// inside the pb/service.pb.go file. The "server" struct already provides an
// implementation of OnboardingDemo server interface service, but only
// for the GetVersion function. You will need to implement any new RPCs you
// add to your protobuf schema.
//
// TODO: Update the GetVersion function when newer versions of your service
// become available. Feel free to change GetVersion to better-suit how your
// versioning system, or get rid of it entirely. GetVersion helps make up a
// simple "starter" example that allows an end-to-end example. It is not
// required.
//
// TODO: Oh yeah, delete this guide when you no longer need it.
//
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~ FAREWELL AND GOOD LUCK ~~~~~~~~~~~~~~~~~~~~~~~~~~
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

const (
	// version is the current version of the service
	version = "0.0.1"
)

// Default implementation of the OnboardingDemo server interface
type server struct{ db *gorm.DB }

type OnboardingServer struct {
	*pb.OnboardingDemoDefaultServer
}

// GetVersion returns the current version of the service
func (server) GetVersion(context.Context, *empty.Empty) (*pb.VersionResponse, error) {
	return &pb.VersionResponse{Version: version}, nil
}

// NewBasicServer returns an instance of the default server interface
func NewBasicServer(database *gorm.DB) (pb.OnboardingDemoServer, error) {
	return &server{db: database}, nil
}

func NewOnboardingServer(database *gorm.DB) (pb.OnboardingDemoServer, error) {
	return &OnboardingServer{&pb.OnboardingDemoDefaultServer{DB: database}}, nil
}

type UserServiceServer struct {
}

type UserItem struct {
	ID   string
	Name string
	Dob  string
}

var allUsers = make(map[string]UserItem)

func (server) CreateUser(ctx context.Context, req *pb.CreateUserReq) (*pb.CreateUserRes, error) {
	user := req.GetUser()
	data := UserItem{
		ID:   user.GetId(),
		Name: user.GetName(),
		Dob:  user.GetDob(),
	}
	// fmt.Println("USER IS:", user.Id, user.Name, user.Dob)
	allUsers[data.ID] = data
	fmt.Println("ALLL USER DATA", allUsers[data.ID])
	return &pb.CreateUserRes{User: user}, nil
}

func (server) ReadUser(ctx context.Context, req *pb.ReadUserReq) (*pb.ReadUserRes, error) {
	fmt.Println("Request id is", req.Id)
	id := req.GetId()
	// allUsers[id] = UserItem{Name: "shubham", ID: "5", Dob: "123456"}
	result, ok := allUsers[id]
	if !ok {
		return &pb.ReadUserRes{}, nil
	}
	fmt.Println("GET USER DATA", allUsers[id])
	response := &pb.ReadUserRes{
		User: &pb.User{
			Id:   result.ID,
			Name: result.Name,
			Dob:  result.Dob,
		},
	}
	return response, nil
}
